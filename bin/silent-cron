#!/usr/bin/perl

use 5.014;
use strict;
use warnings;

use Getopt::Long;
use File::Basename qw(basename);
use IPC::Run qw(run);
use Time::Piece qw(localtime);
use SilentCron::Storage::SQLite;
use SilentCron::JobRun;

our $VERSION = '0.01';

sub usage {
    print <<USAGE;
Usage: ${\basename($0)} \
    [ --ok 2/10 ]
    [ --job-name my-job-name ]
    [ --statefile somefile ]
    -- command to run
USAGE
}

GetOptions(
    'ok|o=s'            => \(my $MustSucceed = '2/10'),
    'job-name|n=s'      => \my $JobName,
    'statefile=s'       => \my $StorageLocation,
    'debug!'            => \my $Debug,
) or die usage();

unless (@ARGV) {
    say "Need a command to run!\n";
    die usage();
}
$JobName //= join ' ', @ARGV;

my ( $MinSuccess, $Total );

if ( $MustSucceed =~ / ^ (\d+) \/ (\d+) $ /x ) {
    $MinSuccess = $1;
    $Total      = $2;
}
else {
    die qq[Invalid argument --ok or -o: "$MustSucceed". Should be in the from <number>/<number>.\n];
}

my $out;

my $timestamp_before = localtime;
say STDERR "DEBUG: Executing @ARGV"
    if $Debug;
run \@ARGV, \'', \$out, \$out;
my $exit_code = $? >> 8;
my $timestamp_after = localtime;
if ( $Debug ) {
    printf STDERR "DEBUG: %s finished with exit code %d and %d bytes of output/error\n",
        $ARGV[0],
        $exit_code,
        length($out);
}

my $backend = SilentCron::Storage::SQLite->new(
    storage_location => $StorageLocation,
    debug            => $Debug,
);

my $run = SilentCron::JobRun->new(
    job_name        => $JobName,
    output          => $out,
    exit_code       => $exit_code,
    start_time      => $timestamp_before,
    end_time        => $timestamp_after,
);

$backend->record($run);

unless ( $run->is_success ) {
    my @jobs = $backend->list(
        limit    => $Total,
        job_name => $JobName,
    );
    if (@jobs < $Total ) {
        printf STDERR "DEBUG: Have only %d runs, silencing error.\n", scalar(@jobs)
            if $Debug;
    }
    else {
        my $SuccessCount = () = grep $_->is_success, @jobs;
        if ( $SuccessCount < $MinSuccess ) {
            printf "Only %d runs out of the last %d were successful for job %s\n",
                $SuccessCount, $Total, $JobName;
            if (length $out) {
                print "Job output was:\n$out";
            }
            else {
                print "The job produced no output.\n";
            }
            print "----\nThe exit code was $exit_code.\n";
        }
    }
}

exit $exit_code;

__END__

=encoding UTF-8

=head1 NAME

silent-cron -- silence occasional failures from cron jobs (or other programs)

=head1 SYNOPSIS

    silent-cron -- command with args
    silent-cron --jobname 'Cache cleanup' --ok 1/20 --statefile foo.sqlite3 \
                -- command with args

=head1 DESCRIPTION

C<silent-cron> is a wrapper around commands that suppresses the output of
those commands if they fail only occasionally. The definition of
I<occasionally> can be given with the C<--ok> option. For example with the
C<--ok 3/25>, you specify that output is suppressed, unless fewer than 3 of
the last 25 runs of the job were successful.

A job run counts as successful when it has exit code 0. C<silent-cron> always
exits with the same status code as the command it wraps.

The result of the last job runs is stored in a local SQLite database. You can
override its location with C<--statefile otherfilename>. Other storage
backends might be supported in future, if there is demand for it.

=head1 OPTIONS

=head2 --job-name <STRING>

C<silent-cron> looks for previous executions of the same job correlating the
job name of each job run. With the C<--job-name> command, you can override the
default job name, which is simply the command all of its arguments joined by
whitespace.

If you run

    silent-cron echo true

the default job name is `echo true`.

The job name is also used in the output of a failed job.

=head2 --debug

Write debugging information to STDERR.

=head2 --ok <MIN>/<TOTAL>

Specifies how many of the last job runs must have been successful. If less
than C<< <MIN> >> out of last C<< <TOTAL> >> runs of this job have succeeded,

=head2 --statefile <FILENAME>

Specifies the file in which state record for the previous runs is kept.

=head1 AUTHOR

Moritz Lenz for the noris network AG

=cut
